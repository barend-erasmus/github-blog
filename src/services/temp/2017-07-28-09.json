[{"id":"barend-erasmus-at-bloom-filter","title":"Bloom Filter","short":"A Bloom filter is a space-efficient probabilistic data structure, conceived by Burton Howard Bloom in 1970, that is used to test whether an element is a member of a set. False positive matches are possible, but false negatives are not – in other words, a query returns either \"possibly in set\" or \"definitely not in set\".","body":"# Bloom Filter\n\nA Bloom filter is a space-efficient probabilistic data structure, conceived by Burton Howard Bloom in 1970, that is used to test whether an element is a member of a set. False positive matches are possible, but false negatives are not – in other words, a query returns either \"possibly in set\" or \"definitely not in set\".\n\n## The Basics\n\nDefine an array of `n` bits which are all set to `0`.\n\nBelow is an array containing 8 bits.\n\n|   Bit     |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |\n| --------- | ----- | ----- | ----- | ----- | ----- | ----- | ----- | ----- |\n|   Index   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |\n\nCompute the hash of `one` using the FNV Algorithm, which returns `7`. \n\nSet the index, `7`, to `1`\n\nThe array will be updated and look like this.\n\n|   Bit     |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   1   |\n| --------- | ----- | ----- | ----- | ----- | ----- | ----- | ----- | ----- |\n|   Index   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |\n\nCompute the hash of `two` using the FNV Algorithm, which returns `1`. \n\nSet the index, `1`, to `1`\n\nThe array will be updated and look like this.\n\n|   Bit     |   0   |   1   |   0   |   0   |   0   |   0   |   0   |   1   |\n| --------- | ----- | ----- | ----- | ----- | ----- | ----- | ----- | ----- |\n|   Index   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |\n\nTo test if there's a chance that `three` could exist, compute the hash of `three`, which is equal to `3`.\n\nCheck if index `3` is equal to `1`, which in this case is `false`.\n\n\nTo test if there's a chance that `one` could exist, compute the hash of `one`, which is equal to `7`.\n\nCheck if index `7` is equal to `1`, which in this case is `true`.\n\n## Implementation\n\n```javascript\n\nfunction hash_fnv1a(str) {\n    let h = 0x811c9dc5;\n\n    for (let i = 0, l = str.length; i < l; i++) {\n        h ^= str.charCodeAt(i)\n        h += (h << 1) + (h << 4) + (h << 7) + (h << 8) + (h << 24)\n    }\n\n    return h >>> 0\n}\n\nfunction addToBloomFilter(str, arr) {\n    const hash = hash_fnv1a(str);\n\n    const index = hash % arr.length;\n\n    arr[index] = 1;\n\n    return arr;\n}\n\nfunction test(str, arr) {\n    const hash = hash_fnv1a(str);\n\n    const index = hash % arr.length;\n   \n    return arr[index] === 1;\n}\n\nlet arr = new Array(8);\n\narr = addToBloomFilter('one', arr);\narr = addToBloomFilter('two', arr);\n\nconsole.log(test('one', arr));      // True\nconsole.log(test('two', arr));      // True\nconsole.log(test('three', arr));    // False\n\n```\n\n## Useful Links\n\n[Jason Davies](https://www.jasondavies.com/bloomfilter/)\n\n[Geeks for Geeks](http://www.geeksforgeeks.org/bloom-filters-introduction-and-python-implementation/)\n\n[Prakhar](https://prakhar.me/articles/bloom-filters-for-dummies/)","author":"barend-erasmus","authorImage":"https://avatars2.githubusercontent.com/u/27447295?v=4","timestamp":"2017-07-11T10:44:44Z","linkedInShareCount":2,"displayTimestamp":"11 July 2017 12:44"},{"id":"barend-erasmus-at-canary-releases","title":"Canary Releases","short":"Canary release is a technique that helps reduce the impact of negative changes by gradually rolling out the changes. If a problem with the new release is detected during the rollout then it can be rolled back, and only a subset of the traffic will have been impacted.","body":"# Canary Releases\n\nCanary release is a technique that helps reduce the impact of negative changes by gradually rolling out the changes. If a problem with the new release is detected during the rollout then it can be rolled back, and only a subset of the traffic will have been impacted.\n\n![](https://github.com/barend-erasmus/canary-releases/raw/master/images/canary-releases.png)\n\n## Advantages of Canary Releases\n\n* Both, A and B, can run in parallel without affecting each other.\n* Rollbacks are simple.\n* New releases can be deployed with low risk.\n\n## Enablers\n\n* Services / API's need to be versioned.\n* Database Stored Procedures needs to be versioned.\n* Phoenix Server Strategy need to be in place.\n\n## Possible Release Strategy\n\n![](https://github.com/barend-erasmus/canary-releases/raw/master/images/canary-releases-pipeline.png)\n","author":"barend-erasmus","authorImage":"https://avatars2.githubusercontent.com/u/27447295?v=4","timestamp":"2017-06-14T09:19:53Z","linkedInShareCount":13,"displayTimestamp":"14 June 2017 11:19"},{"id":"barend-erasmus-at-diffie-hellman-key-exchange-algorithm","title":"Diffie-Hellman Key Exchange Algorithm","short":"Diffie–Hellman key exchange (D–H) [nb 1] is a specific method of securely exchanging cryptographic keys over a public channel and was one of the first public-key protocols as originally conceptualized by Ralph Merkle and named after Whitfield Diffie and Martin Hellman.[1][2] D–H is one of the earliest practical examples of public key exchange implemented within the field of cryptography.","body":"# Diffie-Hellman Key Exchange Algorithm\n\n![](https://github.com/barend-erasmus/diffie-hellman-key-exchange-algorithm/raw/master/images/iffie-hellman-key-exchange-algorithm.png)\n\n```javascript\n\nconst p = findNthPrimeNumber(26);\nconst a = findNthPrimitiveRoot(2, p);\n\nconst alicePrivateNumber = 5;\nconst aliceResult = Math.pow(a, alicePrivateNumber) % p;\n\nconst bobPrivateNumber = 9;\nconst bobResult = Math.pow(a, bobPrivateNumber) % p;\n\nconst sBob = Math.pow(aliceResult, bobPrivateNumber) % p;\nconst sAlice = Math.pow(bobResult, alicePrivateNumber) % p;\n\nconsole.log(sAlice + ' - ' + sBob);\n\n```","author":"barend-erasmus","authorImage":"https://avatars2.githubusercontent.com/u/27447295?v=4","timestamp":"2017-06-09T07:22:06Z","linkedInShareCount":7,"displayTimestamp":"09 June 2017 09:22"},{"id":"barend-erasmus-at-hashcash-algorithm","title":"Hashcash Algorithm","short":"Hashcash is a proof-of-work system used to limit email spam and denial-of-service attacks, and more recently has become known for its use in bitcoin (and other cryptocurrencies) as part of the mining algorithm. The original idea was first proposed by C. Dwork and M. Naor in 1992","body":"# Hashcash Algorithm\n\nHashcash is a proof-of-work system used to limit email spam and denial-of-service attacks, and more recently has become known for its use in Bitcoin (and other cryptocurrencies as part of the mining algorithm. The original idea was first proposed by C. Dwork and M. Naor in 1992.\n\n## The Format\n\n`1:5:170628:hello world::OS45NjEwMzI0MzQ2NDgxMTJlKzMwNw==:MTQ3OTgz`\n\nThe header consists of:\n\n* Hashcash version of 0 or 1.\n* Number of 'partial pre-image' (zero) bits in the hash result.\n* Date in the format of YYMMDD.\n* Resource being transmitted.\n* Extension. This is ignored in version 1.\n* Random characters, encoded in base-64 format.\n* Counter, encoded in base-64 format.\n\nIn this example, it took 0.913 seconds to compute a hash of `0000044c7cc6f2129f2635e44ca265b597dbffff`\n\n## How does it work?\n\n```javascript\n\nconst version = '1';\nconst bits = 5;\nconst date = moment().format('YYMMDD');\nconst resource = data;\nconst extension = '';\nconst rand = Math.floor(Math.random() * Number.MAX_VALUE) + 1;\nlet counter = 0;\n\nwhile (counter <  Number.MAX_VALUE - 1) {\n\n    const header = `${version}:${bits}:${date}:${resource}:${extension}:${toBase64(rand.toString())}:${toBase64(counter.toString())}`;\n\n    const result = crypto.createHash('sha1').update(header).digest('hex');\n\n    if (result.startsWith(generatePartialPreImage(bits))) {\n        console.log(result);\n\n        break;\n    }\n\n    counter += 1;\n}\n\n```\n\n","author":"barend-erasmus","authorImage":"https://avatars2.githubusercontent.com/u/27447295?v=4","timestamp":"2017-07-03T06:25:33Z","linkedInShareCount":1,"displayTimestamp":"03 July 2017 08:25"},{"id":"barend-erasmus-at-installing-docker","title":"Installing Docker","short":"Installation guide for Docker on Ubuntu 17.04 and Windows 10","body":"# Installing Docker\n\n## Linux\n\nConnect to your Linux machine using a SSH Client such as Putty.\n\n![\"Putty SSH Client\"](https://github.com/barend-erasmus/installing-docker/raw/master/images/putty.PNG)\n\nWe need to start by updating the local server's apt package indexes.\n\n`sudo apt-get update`\n\nNext you'll need to add the GPG (GNU Privacy Guard) key for the Docker repository.\n\n`sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D`\n\nWe are now authorized to access the Docker repository and it's sources. We can add these sources to our APT sources.\n\n`sudo apt-add-repository 'deb https://apt.dockerproject.org/repo ubuntu-xenial main'`\n\nTo make sure that we use the docker-engine package that we just added, we need to update all packages and clear the original docker-engine package from the APT sources.\n\n`sudo apt-get update & apt-cache policy docker-engine`\n\nInstalling Docker.\n\n`sudo apt-get install -y docker-engine`\n\nTo check if you have successfully installed docker you can run this command.\n\n`sudo systemctl status docker`\n\n\n## Windows\n\nGo to the [docker site](https://docs.docker.com/docker-for-windows) to download the installer.\n\nOnce you have downloaded the installer, run the .msi file.\n\nFollow the installation guide.\n\nAfter installation you'll have to restart your machine.\n\nTo test your docker installation, open command prompt and run the following command:\n\n`docker -v`\n\nYou should get an output of `Docker version 1.13.0, build 49bf474` or something similar.","author":"barend-erasmus","authorImage":"https://avatars2.githubusercontent.com/u/27447295?v=4","timestamp":"2017-07-06T06:06:30Z","linkedInShareCount":3,"displayTimestamp":"06 July 2017 08:06"},{"id":"barend-erasmus-at-linux-demo","title":"Linux: Demo","short":"Simple to Advanced Demo for Linux Newbies","body":"# Linux: Demo\n\nPrerequisites:\n1. Ubuntu Server 17.04.\n2. 'root' User.\n3. 'demo' User (No root Permissions).\n4. Configure SSH keys.\n5. Login with 'demo' user.\n\nIn this document we'll cover:\n\n1. Reading Linux Documentation\n2. Connecting to a Linux Machine\n    1. SSH Cients\n    2. Using passwords\n    3. Using SSH keys\n3. Installing Redis on a Ubuntu Server\n4. Configure Redis as a Service\n5. Installing NGINX on a Ubuntu Server\n7. Create a New Linux User\n8. Create SSH Key Pair\n9. Switching User in Linux\n\n## Reading Documentation\n\nA good place to find documentation on Linux Commands is at [Linux Command Reference Index](http://www.perpetualpc.net/srtd_commands_rev.html).\n\nThe most common Linux Command format is:\n\n`[command] [options] [arguments]`\n\nFor example:\n\n`ls --all /opt/`\n\nWhere: \n\nCommand: `ls`\n\nOptions: `--all`\n\nArguments: `/opt/`\n\nSometimes you may encounter documentation where the command is in the following format:\n\n`curl [options] -u <username>:<password> <url>`\n\nNote that there are two different brackets, <> and [].\n\n`<username>` means replace this with a username.\n\n`<password>` means replace this with a password.\n\n`<url>` means replace this with a url.\n\n`[options]` means replace this with a valid option of this command.\n\n## Connecting to a Machine\n\nSSH stands for Secure Shell.\n\nUses encryption to secure data with one of the follow ciphers:\n\n* aes128-ctr\n* aes192-ctr\n* aes256-ctr MACs\n    * hmac-sha1\n    * umac-64@openssh.com\n    * hmac-ripemd160\n    * hmac-sha1-96\n    * hmac-sha2-256\n    * hmac-sha2-512\n    * hmac-sha2-512-96\n\n### SSH Clients:\n\n* Putty\n* SuperPutty\n* Kitty\n* SmarTTY\n* mRemoteNG\n* Terminals\n\n### Using passwords\n\n![](https://github.com/barend-erasmus/linux-demo/raw/master/images/putty-ssh-password.PNG)\n\n### Using SSH keys\n\n![](https://github.com/barend-erasmus/linux-demo/raw/master/images/putty-ssh-keys.png)\n\n## Installing Redis\n\n`sudo` stands for 'superuser do'\n\n`sudo apt-get update` downloads the package lists from the repositories and \"updates\" them to get information on the newest versions of packages and their dependencies.\n\n`sudo apt-get install build-essential` installs all the packages needed to compile a debian package. Includes the gcc/g++ compilers.\n\n`sudo apt-get install tcl8.5` installs TCL which is a very powerful dynamic programming language.\n\n`wget http://download.redis.io/releases/redis-stable.tar.gz` downloads the Redis source to our **current/working** directory.\n\n`tar xzf redis-stable.tar.gz` unzip/untar the downloaded file.\n\nWe can use `ls` to see the downloaded files.\n\n`cd redis-stable` changes to 'redis-stable' directory.\n\n`make` compiles the source code using the gcc/g++ compilers.\n\n`make install` installs the compiled source by running a TCL script.\n\nRedis is now installed. We can test this by running `redis-cli` which should give us an error as their is no instance of Redis running.\n\nTo run a Redis instance we need a configuration file which we can create by using 'nano' editor.\n\n`sudo mkdir /etc/redis` create the directory.\n\n`sudo nano /etc/redis/6379.conf` opens/creates the file at '/etc/redis/6379.conf' in 'nano'.\n\nIf we just wanted to create a file without opening it we could have used `touch /etc/redis/6379.conf`.\n\n`redis-server /etc/redis/6379.conf` run Redis Server with the config as a parameter.\n\n## Configure Redis as a Service\n\nIn this example we'll be create systemd services.\n\n'systemd' works with unit file which is what the service configuration file is called.\n\nThese files contains configurations, such as:\n\n* Description.\n* When to start, before or after the network service.\n* Type of service.\n* What executable to execute.\n\n```\n\n[Unit]\nDescription=Redis Server\n\n[Service]\nUser=root\nGroup=root\nExecStart=/usr/local/bin/redis-server /etc/redis/6379.conf\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n\n```\n\nWhen this file is created in `/etc/systemd/system` as 'my-redis.service', it's ready to be executed.\n\nTo start a service we can run:\n\n`sudo systemctl start my-redis`\n\nand to stop a service:\n\n`sudo systemctl stop my-redis`\n\n## Installing NGINX\n\n1. `sudo apt-get update`\n2. `sudo apt-get install nginx`\n3. `sudo ufw allow 'Nginx HTTP'`\n\n## Create a New User\n\n`sudo useradd -m <username>`\n\n`sudo passwd <username>`\n\n## Switching User\n\n`su - <username>`","author":"barend-erasmus","authorImage":"https://avatars2.githubusercontent.com/u/27447295?v=4","timestamp":"2017-06-26T05:27:38Z","linkedInShareCount":0,"displayTimestamp":"26 June 2017 07:27"},{"id":"barend-erasmus-at-linux-file-system","title":"Linux: File System","short":"File systems are one of the things any newcomer to Linux must become acquainted with","body":"# Linux: File System\n\nIn this document we'll cover:\n\n1. Why the Linux File System is important?\n2. File System Explained\n\n## Why the Linux File System is important?\n\nUnderstanding the Linux File System will clear out a lot of questions.\n\n* What is a socket file?\n* 'myfile' vs. 'myFile' ( Case Sensitivity )\n* No C: or D: drive?\n* Deleting an open file?\n\n**In Linux everything is a file**\n\n* External Drives\n* Network Traffic\n* CPU Performance\n* SWAP configuration\n* ...\n\n**NO CONTROL PANEL**\n\n**NO USER MANAGEMENT**\n\n**NO REGISTRY**\n\n\nThere is tools that could help with the above but all these still is edits a file.\n\n## File System Explained\n\nHere is a list of the most commonly used directories in the Linux File System. There are a few which we'll not cover as it is optional or distribution specific.\n\n![](https://github.com/barend-erasmus/linux-file-system/raw/master/screenshots/linux-filesystem.png)\n\n### / – The Root Directory\n\nEverything on your Linux system is located under the / directory, known as the root directory.\n\n### /bin – Essential User Binaries\n\nThe /bin directory contains the essential user binaries (programs) that must be present when the system is mounted in single-user mode. Programs which a user install will be under /usr/bin but system programs will be located in /bin.\n\n### /boot – Static Boot Files\n\nThe files in the /boot directory is needed to boot the system.\n\n### /dev – Device Files\n\nRemember everything is a file, including devices. Examples would be CPU, Keyboard and Memory.\n\n### /etc – Configuration Files\n\nThe /etc directory contains configuration files, which can generally be edited by hand in a text editor.\n\n### /home – Home Folders\n\nThe /home directory contains a home folder for each user.\n\n### /lib – Essential Shared Libraries\n\nThe /lib directory contains libraries needed by the essential binaries in the /bin and /sbin folder.\n\n### /media – Removable Media\n\nThe /media directory contains subdirectories where removable media devices inserted into the computer are mounted.\n\n### /opt – Optional Packages\n\nThe /opt directory contains subdirectories for optional software packages.\n\n### /proc – Kernel & Process Files\n\nThe /proc directory similar to the /dev directory because it doesn’t contain standard files. \n\n### /root – Root Home Directory\n\nThe /root directory is the home directory of the root user.\n\n### /run – Application State Files\n\nThe /run directory is fairly new, and gives applications a standard place to store transient files they require like sockets and process IDs.\n\n### /sbin – System Administration Binaries\n\nThe /sbin directory is similar to the /bin directory. It contains essential binaries that are generally intended to be run by the root user for system administration.\n\n### /srv – Service Data\n\nThe /srv directory contains “data for services provided by the system.”\n\n### /tmp – Temporary Files\n\nApplications store temporary files in the /tmp directory. These files are generally deleted whenever your system is restarted.\n\n### /usr – User Binaries & Read-Only Data\n\nThe /usr directory contains applications and files used by users, as opposed to applications and files used by the system.\n\n### /var – Variable Data Files\n\nThe /var directory is the writable counterpart to the /usr directory, which must be read-only in normal operation.\n","author":"barend-erasmus","authorImage":"https://avatars2.githubusercontent.com/u/27447295?v=4","timestamp":"2017-06-21T07:34:28Z","linkedInShareCount":0,"displayTimestamp":"21 June 2017 09:34"},{"id":"barend-erasmus-at-linux-install","title":"Linux: Install","short":"Installing Ubuntu 17.04 with screenshots","body":"# Linux: Install\n\nInstalling Ubuntu 17.04 with screenshots\n\n## Step 1\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-1.png)\n\nSet the langauge of the Operating System.\n\n## Step 2\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-2.png)\n\nSet the country/region of the Operating System.\n\n## Step 3\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-3.png)\n\nWe are given an option to auto-detect the keyboard layout. In this example we'll skip this step.\n\n## Step 4\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-4.png)\n\nSet the keyboard layout of the Operating System.\n\n## Step 5\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-5.png)\n\nSet hostname of the Operating System.\n\n## Step 6\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-6.png)\n\nSet full name of first user.\n\n## Step 7\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-7.png)\n\nSet username of the first user.\n\n## Step 8\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-8.png)\n\nSet password of the first user.\n\n## Step 9\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-9.png)\n\nRetype password of the first user.\n\n## Step 10\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-10.png)\n\nWe are given the option to encrypt the home directory of this user. In this example we'll not encrypt the home directory.\n\n## Step 11\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-11.png)\n\nSet time zone of the Operating System.\n\n## Step 12\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-12.png)\n\nUse entrie disk and set up LVM (Logical Volume Manager). \n\n## Step 13\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-13.png)\n\nSelect the disk partition.\n\n## Step 14\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-14.png)\n\nConfirm configuration and write to disk.\n\n## Step 15\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-15.png)\n\nSpecify the size of the partion that you want to use. In this example we'll use the entire partition.\n\n## Step 16\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-16.png)\n\nConfirm configuration and write to disk.\n\n## Step 17\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-17.png)\n\nConfigure HTTP proxy. In this example we'll not be using a proxy.\n\n## Step 18\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-18.png)\n\nSelect behaviour of Operating System Updates.\n\n## Step 19\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-19.png)\n\nChoose software to install. In this example we'll install 'standard system utilities' and 'OpenSSH server'.\n\n## Step 20\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-20.png)\n\nInstall the GRUB boot loader to the master boot record.\n\n## Step 21\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-21.png)\n\nInstallation is complete. Remove the installation media and continue.\n\n## Step 22\n\n![](https://github.com/barend-erasmus/linux-install/raw/master/images/image-22.png)\n\nWelcome to Ubuntu 17.04\n\n\n\n","author":"barend-erasmus","authorImage":"https://avatars2.githubusercontent.com/u/27447295?v=4","timestamp":"2017-06-21T08:11:10Z","linkedInShareCount":0,"displayTimestamp":"21 June 2017 10:11"},{"id":"barend-erasmus-at-machine-learning","title":"Machine Learning","short":"Machine learning is the sub-field of computer science that, according to Arthur Samuel in 1959, gives \"computers the ability to learn without being explicitly programmed.\"","body":"# Machine Learning\n\nMachine learning is the sub-field of computer science that, according to Arthur Samuel in 1959, gives \"computers the ability to learn without being explicitly programmed.\"\n\n## The Hidden Layer\n\n![](https://github.com/barend-erasmus/machine-learning/raw/master/images/machine-learning-basic.png)\n\nThe **Hidden Layer** in machine learning can consist of anything but most commonly consist of one or more of the following algorithms.\n\n* Linear Regression\n* Logistic Regression\n* Decision Tree\n* Support Vector Machines\n* Naive Bayes\n* k-Nearest Neighbors\n* K-Means\n* Random Forest\n* Dimensionality Reduction Algorithms\n* Gradient Boost & Adaboost\n* Learning Vector Quantization\n* Binary Classification\n* Linear Classifier\n* and more...\n\nEach of the above algorithms has different variations which include over 70 unique algorithms.\n\nHere is an example of what a **Hidden Layer** could look like.\n\n![](https://github.com/barend-erasmus/machine-learning/raw/master/images/machine-learning-hidden-layer.png)\n\n## How is the Hidden Layer trained?\n\nThe **Hidden Layer** can be trained by provided data with its class.\n\nIn the example below, the data would be the text and the class would either be 'liked' or 'disliked'.\n\n![](https://github.com/barend-erasmus/machine-learning/raw/master/images/like-dislike.PNG)\n\nBased on the user's answer, the next prediction would be better as the previous. The prediction before and after could also be used and feed into the system to increase the quality of the next prediction.","author":"barend-erasmus","authorImage":"https://avatars2.githubusercontent.com/u/27447295?v=4","timestamp":"2017-07-13T08:11:20Z","linkedInShareCount":11,"displayTimestamp":"13 July 2017 10:11"},{"id":"barend-erasmus-at-naive-bayes-algorithm","title":"Naive Bayes Algorithm","short":"In machine learning, naive Bayes classifiers are a family of simple probabilistic classifiers based on applying Bayes' theorem with strong (naive) independence assumptions between the features.","body":"# Naive Bayes Algorithm\n\nIn machine learning, naive Bayes classifiers are a family of simple probabilistic classifiers based on applying Bayes' theorem with strong (naive) independence assumptions between the features.\n\n# Probabilistic Model\n\nposterior = prior x likelihood / evidence\n\n|   Weather     |   Transport Method    |\n|---------------|-----------------------|\n|   Cloudy      |   Car                 |\n|   Sunny       |   Bike                |\n|   Rainy       |   Car                 |\n|   Windy       |   Car                 |\n|   Windy       |   Bike                |\n|   Sunny       |   Car                 |\n|   Windy       |   Car                 |\n|   Sunny       |   Bike                |\n|   Rainy       |   Car                 |\n|   Sunny       |   Car                 |\n|   Windy       |   Car                 |\n\n\nWhat are the probability that Bob will take choose 'Bike' on a 'Windy' day?\n\nprior = Probability that Bob will choose a Bike on given he does not know the weather.\n\nprior = 3 / 11 = 0.27\n\nlikelihood = Probability that Bob will choose a Bike on given he does know it's 'Windy'.\n\nlikelihood = 1 / 3 = 0.33\n\nevidence = Probability that is going to be 'Windy'.\n\nevidence = 4 / 11 = 0.36\n\nposterior = prior x likelihood / evidence\n\nposterior = 0.27 x 0.33 / 0.36 = 0.25\n\n# Gaussian naive Bayes\n\nposterior = (1 / sqrt(2 x PI x variance)) x exp((-x - mean) ^ 2 / (2 x variance))\n\n\n\n\n","author":"barend-erasmus","authorImage":"https://avatars2.githubusercontent.com/u/27447295?v=4","timestamp":"2017-06-13T15:03:00Z","linkedInShareCount":1,"displayTimestamp":"13 June 2017 17:03"},{"id":"barend-erasmus-at-new-software-developer-at-euromonitor","title":"Experience as a new Software Developer at Euromonitor International","short":null,"body":"# Experience as a new Software Developer at Euromonitor International\n\nI’m Barend Erasmus, 19 years young and a passionate software developer. I previously worked at a\nrather small company which meant Euromonitor International would be a big change for me. \n\n## Before Day One\n\nReading and watching video about Euromonitor International gave the impression of a huge corporate\ncompany which lead to the concern of being unrecognized and unimportant being 19 years old with less\nthan 2 years of experience. \n\n##  First Week\n\nThe first week was fun. I had a lot learn with plenty of fellow employees willing to help. I realized that it’s not a corporate company but rather a large company with a relaxed environment. It was comforting to know that as I come from such an environment, just smaller. I was handed a mentoring program which I would be following for the next 6 months. The mentoring program was changed so that I would spend time with QA first before doing any development. \n\n## The Time with QA\n\nAt first it was a struggle. Getting to learn the process of QA and grasping Telerik was quite difficult. To think like a tester takes more planning than I initially thought, thinking of all the scenarios and entry points. Within the first week I started to find it easier but noticed a tester has a lot of responsibility which might be the reason why QA takes long. After I’ve been with QA, I have more respect for them and understand the hurdles that they might encounter. \n\n## Working as a Developer\n\nKnowing that Euromonitor developers has a large variety of skills, I was excited to start working with\nthem. By learning something new every day made hours feel like minutes and months like weeks. I enjoy\nworking in this environment where knowledge is always shared and help is provided when required.\n\n## Goals\n\nAs I’m still young, I still want to get BSc. degree but personally I value experience more than education, thus I’m only looking to start my degree in 2019, for now I’m interested in Microsoft Certifications. ","author":"barend-erasmus","authorImage":"https://avatars2.githubusercontent.com/u/27447295?v=4","timestamp":"2017-06-08T18:35:15Z","linkedInShareCount":0,"displayTimestamp":"08 June 2017 20:35"},{"id":"barend-erasmus-at-node-callback-hell","title":"Node: Callback Hell","short":"Explaining the NodeJS Callback Hell","body":"# Node: Callback Hell\n\nIn this document we'll cover:\n\n1. The Problem\n2. The Solution\n3. Frameworks\n\n## The Problem\n\n```javascript\n    // Find user by username\n    findUserByUsername(username, function (err, user) {\n        \n        // Check if user is active\n        if (user.isActive) {\n\n            // Find user permissions by user id\n            findUserPermissions(user.id, function (err, permissions) {\n\n                // Check for error\n                if (err) {\n                    console.error(err);\n                    return;\n                }\n\n                if (permission.contains('admin')) {\n                    \n                    // Insert data into database\n                    sql.query('INSERT INTO ....', function (err, result) {\n\n                        // Check for error\n                        if (err) {\n                            console.error(err);\n                            return;\n                        }\n                        \n                        // Update data in database\n                        sql.query('UPDATE ....', function (err, result) {\n\n                            // Check for error\n                            if (err) {\n                                console.error(err);\n                                return;\n                            }\n\n                            // Call third party api\n                            http.get(url, function (err, response) {\n\n                                // Check for error\n                                if (err) {\n                                    console.error(err);\n                                    return;\n                                }\n                                \n                                // Send JSON object to client\n                                sendJSONToClient();\n                            });\n                        });\n                    });\n                }else {\n\n                    // Insert data into database\n                    sql.query('INSERT INTO ....', function (err, result) {\n\n                        // Check for error\n                        if (err) {\n                            console.error(err);\n                            return;\n                        }\n\n                         // Send JSON object to client\n                         sendJSONToClient();\n                    });\n                }\n            });\n        }\n    });\n```\n\n\n## The Solution\n\n```javascript\n    // Find user by username\n    findUserByUsername(username).then(function(user) {\n\n        // Check if user is active\n        if (user.isActive) {\n\n            // Find user permissions by user id\n            return findUserPermissions(user.id);\n        }\n\n    }).then(function (permission) {\n         if (permission.contains('admin')) {\n\n             // Insert data into database\n             return sql.query('INSERT INTO ....');\n\n         } else {\n\n             // Insert data into database\n             return sql.query('INSERT INTO ....');\n        \n         }\n    }).then(function (result) {\n\n        // Call third party api\n        return http.get(url);\n\n    }).then(function (response) {\n\n        // Send JSON object to client\n        sendJSONToClient();\n\n    }).catch(function (err) {\n        console.error(err);\n    });\n```\n\n## Frameworks\n\nFrameworks to make async calls read better:\n\n* CO\n* BlueBird\n* Async.js\n\n\n### CO Example\n\n```javascript\nco(function* () {\n    // Find user by username\n    var user = yield findUserByUsername(username);\n\n    // Check if user is active\n    if (user.isActive) {\n\n        // Find user permissions by user id\n        var permissions = yield findUserPermissions(user.id);\n\n        if (permission.contains('admin')) {\n\n            // Insert data into database\n            var result = yield sql.query('INSERT INTO ....');\n\n            var response = yield http.get(url);\n\n            // Send JSON object to client\n            sendJSONToClient();\n\n         } else {\n\n            // Insert data into database\n            var result = yield sql.query('INSERT INTO ....');\n        \n         }\n    }\n});\n```","author":"barend-erasmus","authorImage":"https://avatars2.githubusercontent.com/u/27447295?v=4","timestamp":"2017-06-06T09:31:28Z","linkedInShareCount":0,"displayTimestamp":"06 June 2017 11:31"},{"id":"barend-erasmus-at-node-event-loop","title":"Node: Event Loop","short":"Explaining the NodeJS Event Loop","body":"# Node: Event Loop\n\nIn this document we'll cover:\n\n1. What is the Event Loop?\n2. What is single threaded?\n3. Thread Pool\n\n## What is the Event Loop?\n\n| Event Queue                            | Order      \n| ---------------------------------------|------------- |\n| Write to console 'Reading file...'     | 1            |\n| Queue file reading task                | 2            |\n| Write to console 'Done.'               | 3            |\n| .....                                  | 4            |\n| .....                                  | 5            |\n| Callback with file data                | 6            |\n| Write to console                       | 7            |\n\n### What is single threaded?\n\nA single threaded application can be thought of as a long line at a cash register. Everything executes sequentially in order. The important take away is **YOUR** application does one thing at a time.\n\n```javascript\n    console.log('Reading file...');\n\n    var fileBytes = fs.readFileSync(filename, \"utf8\");\n\n    console.log('The file contains ' + fileBytes.length + ' bytes.');\n\n    console.log('Done.');\n```\n\n```\n    OUTPUT:\n\n    Reading file...\n    The file contains 142 bytes.\n    Done.\n```\n\nHandling a web request\n\n```javascript\n    function handleRequest() {\n        // Retrieve data from database\n\n        // Calculate averages\n\n        // Write data to database\n\n        // Send JSON object to client\n\n    }\n```\n\nIn the example above, no requests will be processed while data is being retrieve or written to the database. Node is single threaded and can only perform **ONE** action at a time. \n\nThis will reduce the number of request that your application can handle per second.\n\n### Thread Pool\n\nApart from your application, Node runs an IO and Network thread pool which consists of 4 (by default) threads.\n\nThese threads can be used to offload IO and Network tasks.\n\nExample of a non-blocking task.\n\n```javascript\n    console.log('Reading file...');\n\n    fs.readFile('/etc/hosts', 'utf8', function (err,fileBytes) {\n        console.log('The file contains ' + fileBytes.length + ' bytes');\n    });\n\n    console.log('Done.');\n```\n\n```\n    OUTPUT:\n    \n    Reading file...\n    Done.\n    The file contains 142 bytes.\n```\n\nExample of a blocking task.\n\n```javascript\n    console.log('Reading file...');\n\n    fs.readFile('/etc/hosts', 'utf8', function (err,fileBytes) {\n        console.log('The file contains ' + fileBytes.length + ' bytes');\n    });\n\n    doSomeStuffThatTakesVeryLong();\n\n    console.log('Done.');\n```\n\nWhat do you think the output will be?\n\n\n```\n    OUTPUT:\n    \n    Reading file...\n    Done.\n    The file contains 142 bytes.\n```\n\nLets take another look at our snippet for handling a request.\n\n```javascript\n\n    function handleRequest() {\n        // Retrieve data from database\n        sql.query('SELECT * FROM ....', function (err1, result1) {\n\n            // Calculate averages\n            calculateAverages();\n\n            // Write data to database\n            sql.query('INSERT INTO ....', function (err2, result2) {\n                // Send JSON object to client\n                sendJSONToClient();\n            }\n        }\n    }\n```","author":"barend-erasmus","authorImage":"https://avatars2.githubusercontent.com/u/27447295?v=4","timestamp":"2017-06-06T09:33:44Z","linkedInShareCount":0,"displayTimestamp":"06 June 2017 11:33"},{"id":"barend-erasmus-at-node-introduction","title":"Node: Introduction","short":"Quick introduction to NodeJs","body":"# Node: Introduction\n\nIn this document we'll cover:\n\n1. What is Node?\n2. When to use Node?\n3. When not to use Node?\n\n## What is Node? \n\n> Node is a JavaScript environment built on the same JavaScript engine used in Google’s Chrome web browser\n\nhttps://medium.com/javascript-scene/introduction-to-node-express-90c431f9e6fd\n\n![diagram1](https://github.com/barend-erasmus/node-introduction/raw/master/images/browser-vs-node.png)\n\n## When to use Node?\n\nUse Node when you have a DIRT-y application.\n\nD - Data\n\nI - Intensive\n\nR - Real\n\nT - Time\n\n![diagram2](https://cdn-images-1.medium.com/max/1600/1*4LsfQ0ZbZkapHDR8eTYp4g.png)\n\n## When not to use Node?\n\nNode does not perform well when executing CPU intensive tasks.\n\nSuch as computing Averages, Standard Deviations...\n\n\n\n\n\n\n\n\n\n","author":"barend-erasmus","authorImage":"https://avatars2.githubusercontent.com/u/27447295?v=4","timestamp":"2017-06-06T09:36:05Z","linkedInShareCount":0,"displayTimestamp":"06 June 2017 11:36"},{"id":"barend-erasmus-at-raft-consensus-algorithm","title":"Raft Consensus Algorithm","short":"Raft is a consensus algorithm designed as an alternative to Paxos. It was meant to be more understandable than Paxos by means of separation of logic, but it is also formally proven safe and offers some additional features.","body":"# Raft Consensus Algorithm\n\nRaft is a consensus algorithm designed as an alternative to Paxos. It was meant to be more understandable than Paxos by means of separation of logic, but it is also formally proven safe and offers some additional features.\n\n## The Basics\n\nAll nodes start as a `Follower` and will remain in this state until the `Heartbeat Timeout` has been exceeded.\n\n\n![](https://github.com/barend-erasmus/raft-consensus-algorithm/raw/master/images/raft-consensus-algorithm-1.png)\n\n### Follower to Candidate\n\nWhen the `Heartbeat Timeout` has been exceeded, the node changes from a `Follower` to a `Candidate`.\n\nThe node also set its `Election Timeout` to a random value between 150ms - 300ms.\n\n\n![](https://github.com/barend-erasmus/raft-consensus-algorithm/raw/master/images/raft-consensus-algorithm-2.png)\n\n### Candidate to Leader\n\nWhen the `Election Timeout` has been exceeded, the node requests a vote from each of the nodes.\n\n\n![](https://github.com/barend-erasmus/raft-consensus-algorithm/raw/master/images/raft-consensus-algorithm-3.png)\n\n\nA node will only vote if they haven't voted in this `Term` otherwise it will decline the vote. When the `Candidate` received votes from the majority of nodes, it will declare itself as the `Leader` and start sending a `Heartbeat` to the other nodes.\n\n## Where is the Raft Consensus Algorithm Used?\n\n* [Redis](https://redis.io/topics/cluster-spec)\n* [Consul](https://www.consul.io/docs/internals/consensus.html)","author":"barend-erasmus","authorImage":"https://avatars2.githubusercontent.com/u/27447295?v=4","timestamp":"2017-07-03T12:44:46Z","linkedInShareCount":5,"displayTimestamp":"03 July 2017 14:44"},{"id":"barend-erasmus-at-redis-cluster-script","title":"Install: Redis Cluster","short":"Install a Redis Cluster using 2 simple scripts","body":"# Install: Redis Cluster\n\nTo install a Redis Cluster across multiple servers you'll need to execute the following command on each of the servers.\n\n`curl -s https://raw.githubusercontent.com/barend-erasmus/redis-cluster-script/master/install.sh | bash -s \"<port1>|<port2>\"`\n\nThen on one of the servers you need to execute the clustering commands.\n\n`curl -s https://raw.githubusercontent.com/barend-erasmus/redis-cluster-script/master/cluster.sh | bash -s \"<numberOfReplicas>\" \"<ipAddressOfServer1>|<ipAddressOfServer2>\" \"<port1>|<port2>\"`\n\nFor example, if you have two servers with the IP Addresses of '192.168.1.101' and '192.168.1.102', your command will be.\n\n`curl -s https://raw.githubusercontent.com/barend-erasmus/redis-cluster-script/master/cluster.sh | bash -s \"1\" \"192.168.1.101|192.168.1.102\" \"7001|7002|7003|7004|7005|7006|7007|7008\"`","author":"barend-erasmus","authorImage":"https://avatars2.githubusercontent.com/u/27447295?v=4","timestamp":"2017-07-27T12:53:13Z","linkedInShareCount":5,"displayTimestamp":"27 July 2017 14:53"},{"id":"barend-erasmus-at-rivest-shamir-adleman-algorithm","title":"Rivest-Shamir-Adleman Algorithm","short":"RSA is an algorithm used by modern computers to encrypt and decrypt messages. It is an asymmetric cryptographic algorithm. Asymmetric means that there are two different keys. This is also called public key cryptography, because one of them can be given to everyone. The other key must be kept private.","body":"# Rivest-Shamir-Adleman Algorithm\n\nRSA is one of the first practical public-key cryptosystems and is widely used for secure data transmission. In such a cryptosystem, the encryption key is public and differs from the decryption key which is kept secret. In RSA, this asymmetry is based on the practical difficulty of factoring the product of two large prime numbers, the factoring problem.\n\n## Example\n\nFirst calculate 2 prime numbers, namely `p` and `q`.\n\np = 7\n\nq = 11\n\nFrom `p` and `q` calculate 2 values, namely `n` and `r`.\n\nn = p * q = 77\n\nr = (p - 1) * (q - 1) = 60\n\nNext find a number equal to `1 % r` which can be factored.\n\nCandidates for `k`: 61, 121, 181, 241, 301, 361, 421, 481, 541, 601, 661, 721, 781, 841, 901, 961, 1021, 1081, 1141, 1201, 1261.\n\nk = 1141\n\nNext find 2 factors of `k`, namely `e` and `d` where `(e * d) % r == 1`.\n\ne = 163 \n\nd = 7\n\n`e` is the public key.\n\n`d` is the private key.\n\nTo encrypt a message:\n\n`Math.pow(msg, e) % n`\n\nTo Decrypt a message:\n\n`Math.pow(msg, d) % n`","author":"barend-erasmus","authorImage":"https://avatars2.githubusercontent.com/u/27447295?v=4","timestamp":"2017-07-24T05:54:36Z","linkedInShareCount":1,"displayTimestamp":"24 July 2017 07:54"},{"id":"barend-erasmus-at-statsd-graphite-grafana","title":"StatsD, Graphite, Grafana","short":"Using StatsD, Graphite and Grafana to analysis your application metrics.","body":"# StatsD, Graphite, Grafana\n\nUsing StatsD, Graphite and Grafana to analysis your application metrics.\n\n![](https://github.com/barend-erasmus/statsd-graphite-grafana/raw/master/images/StatsD-Graphite-Grafana.png)\n\n## What is StatsD?\n\nStatsD is a standard and, by extension, a set of tools that can be used to send, collect, and aggregate custom metrics from any application. Originally, StatsD referred to a daemon written by Etsy in Node.js. Today, the term StatsD refers to both the protocol used in the original daemon, as well as a collection of software and services that implement this protocol.\n\n## What is Graphite?\n\nGraphite is an enterprise-ready monitoring tool that runs equally well on cheap hardware or Cloud infrastructure. Teams use Graphite to track the performance of their websites, applications, business services, and networked servers. It marked the start of a new generation of monitoring tools, making it easier than ever to store, retrieve, share, and visualize time-series data.\n\n## What is Grafana?\n\nGrafana is an open source metric analytics & visualization suite. It is most commonly used for visualizing time series data for infrastructure and application analytics but many use it in other domains including industrial sensors, home automation, weather, and process control.\n\n![](https://github.com/barend-erasmus/statsd-graphite-grafana/raw/master/images/screenshot.png)\n\n## Grafana Demo Links\n\n[Grafana](http://play.grafana.org/dashboard/db/grafana-play-home?orgId=1)\n\n[Lightbend](https://demo.lightbend.com/grafana/dashboard/db/lightbend-monitoring)\n\n[Zabbix](http://play.grafana-zabbix.org/dashboard/db/grafana-zabbix-demo?orgId=2)","author":"barend-erasmus","authorImage":"https://avatars2.githubusercontent.com/u/27447295?v=4","timestamp":"2017-07-17T05:07:59Z","linkedInShareCount":4,"displayTimestamp":"17 July 2017 07:07"},{"id":"barend-erasmus-at-yeoman-tutorial","title":"Yeoman Tutorial","short":"Yeoman helps you to kick-start new projects, prescribing best practices and tools to help you stay productive.","body":"# Yeoman Tutorial\n\nYeoman helps you to kick-start new projects, prescribing best practices and tools to help you stay productive.\n\nYeoman is a command line tool which enables you the create projects from scaffolding templates referred to as generators. These generators are fully customizable and can also be parameterized.\n\n## Installing Yeoman\n\nInstall `yo` using `npm`.\n\n`npm install -g yo`\n\nTo test the installation, run:\n\n`yo doctor`\n\nwhich should result in the following output:\n\n```\nYeoman Doctor\nRunning sanity checks on your system\n\n√ Global configuration file is valid\n√ NODE_PATH matches the npm root\n√ Node.js version\n√ No .bowerrc file in home directory\n√ No .yo-rc.json file in home directory\n√ npm version\n\nEverything looks all right!\n\n```\n\n## Installing and Using a Generator\n\nWe'll be using the `generator-webapp` for this example.\n\nFirst install the generator by running:\n\n`npm install -g generator-webapp`\n\nTo create a new project, run:\n\n`yo webapp`\n\nYou'll be prompted to answer a series of questions where after it will create the required scaffold for the project.\n\n## Creating your Generator\n\na Yeoman uses Node.js modules with certain attributes as generators. The module name has to be in the format of `generator-name` and the `package.json` file need to contain `yeoman-generator` as a keyword.\n\nThis what your directory structure should look like.\n\n```\ngenerator-name\n├───package.json\n└───generators/\n    ├───app/\n        ├───templates\n        |    └───hello-world.html\n        └───index.js\n```\n\n\nThis is what your `package.json` should look like.\n\n```\n{\n  \"name\": \"generator-name\",\n  \"version\": \"0.1.0\",\n  \"description\": \"\",\n  \"files\": [\n    \"generators\"\n  ],\n  \"keywords\": [\"yeoman-generator\"],\n  \"dependencies\": {\n    \"yeoman-generator\": \"^1.0.0\"\n  }\n}\n```\n\nThis should is what your `index.js` should look like.\n\n```javascript\nconst Generator = require('yeoman-generator');\n\nmodule.exports = class extends Generator {\n    constructor(args, opts) {\n        super(args, opts);\n    }\n\n    writing() {\n\n        const obj = {\n            name: this.args[0]\n        };\n\n        this.fs.copyTpl(\n            this.templatePath(),\n            this.destinationPath(),\n            obj\n        );\n    }\n};\n```\n\nFor more details, click [here](http://yeoman.io/authoring/).\n","author":"barend-erasmus","authorImage":"https://avatars2.githubusercontent.com/u/27447295?v=4","timestamp":"2017-07-19T09:17:24Z","linkedInShareCount":0,"displayTimestamp":"19 July 2017 11:17"}]